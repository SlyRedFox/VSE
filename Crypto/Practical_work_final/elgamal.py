# Примечания!
# 1. Для списка binary_numbers  нужно будет внести значения в соответствии с количеством битов, на которые его делим,
# в рассмотренном примере данные делятся в соответствии со значением 7 бит

print('\nВычисляем параметры домена (числа, которые явл-ся общими для группы пользователей): большое простое число p и '
      'число g, принадлежажее мультипликативной группе простого конечного поля F(p)')
print('g - должно не просто принадлежать этой группе, но ещё и являться образующим либо группы F(p), либо её подгруппы')

p: int = 211
g: int = 3
print(f'p = {p}')
print(f'g = {g}')

M: str = 'ЛЕС'
print(f'Сообщение для зашифрования: {M}')

print('Алгоритм генерации ключей')
print('\nШаг 1, выбираем x в диапазоне: 1 < x < p - 1')
x: int = 35
print(f'x = {x}')

print(f'\nШаг 2, вычислить h = g**x mod p, h = {g}**{x} % {p}')
h: int = (g**x) % p
print(f'h = {h}')

print(f'\nШаг 3, Открытый ключ, это h = {h}, закрытый ключ, это x = {x}')


print('\n\nАлгоритм зашифрования')
print(f'\nШаг 1, получили аутентичную копию открытого ключа h = {h}')

print('\nШаг 2, Представляем сообщение в виде числа m в интервале 1 < m < p-1')
print(f'Формируем сообщение M = {M}')


print('\nИнициалы в ASCII, десятичное представление:')
ascii_list = [ord(char) for char in M]
print(ascii_list)

print('Переводим в двоичное представление. ДОБАВЛЯЕМ В НАЧАЛО КАЖДОГО БЛОКА НУЛИ, ЕСЛИ ДЛИНА МЕНЬШЕ 8 БИТ!')
bin_ascii: list = []
for key in ascii_list:
      # print(f'{bin(key)[2:]}')
      bin_ascii.append(bin(key)[2:])
print(bin_ascii)

print('Получаем наше сообщение в виде двоичной строки:')
M_all_string = ''.join(bin_ascii)
print(M_all_string)

print(f'\nНаходим значение n - размер блока, на который делим. Это log2({p}), результат: n = ')
from math import log2
n: int = int(log2(p))
print(n)

print(f'\nРазделяем на кусочки по {n} битов, сюда вносим наши данные. Нули в начале не нужны')
binary_numbers = ['1100011', '1101111', '1100100', '1100101']
print(binary_numbers)

print('Переводим двоичные числа в десятичные и складываем')
# Суммирование десятичных значений двоичных чисел
decimal_sum = sum(int(num, 2) for num in binary_numbers)

# Перевод обратно в двоичную систему
result_binary = bin(decimal_sum)[2:]
# Перевод в десятичную систему
m = int(result_binary, 2)

print(f'Результат для числа h(M), двоичная, {result_binary}  Десятичная: {m}')

print('\nШаг 3, Выбираем сеансовый ключ k в интервале 1 < k < p-1')
k: int = 7
print(f'k = {k}')

print('\nШаг 4, вычисляем два значения C1 = g**k (mod p) и C2 = m * h (mod p)')
print(f'C1 = ({g}**{k}) mod {p}')
print(f'C2 = ({m} * {h}) mod {p}')

c1 = (g**k) % p
c2 = (m * h) % p

print(f'c1 = {c1}, c2 = {c2}')

print('\nШаг 5, ')
